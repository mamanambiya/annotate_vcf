conf_version=""

manifest {
    homePage = 'https://github.com/mypandos/annotate_vcf.git'
    description = ''
    mainScript = 'main.nf'
}

params {
    // Directories
    homedir                 = "${HOME}"
    scratch_dir             = "/spaces/mamana"
    work_dir                = "${params.scratch_dir}/MALI"
    group_dir               = "/spaces/gapw/diversity/mamana" /// Shared folder for working group
    output_dir              = "${params.work_dir}/output"
    scripts                 = "${params.homedir}/templates"
    ref_dir                 = "${scratch_dir}/reference"

    // Data
    datasets {
        MALI = "/spaces/gapw/diversity/gerrit/for_mamana/Eagle.baylor.mali_only.vcf.gz"
    }
    prefix_new              = "baylor_phased_chr"
    chromosomes             = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"
//    chromosomes             = "21,22"
    sample_file             = "${work_dir}/baylor_sample_info_ind_pop_id_only.tsv"
    reduce_sample_size      = "40"

    // GnomaD Exome VCF Files
    gnomad_genome = "https://storage.googleapis.com/gnomad-public/release-170228/vcf/genomes/gnomad.genomes.r2.0.1.sites.%s.vcf.gz"
    gnomad_exome = "https://storage.googleapis.com/gnomad-public/release-170228/vcf/exomes/gnomad.exomes.r2.0.1.sites.vcf.gz"

    // database for snpEff
    snpeff_config           = "${venv}/share/snpeff-4.3-3/snpEff.config"
    snpEff_database         = "${params.scratch_dir}/reference/snpEff_database"
    snpEff_human_db         = "GRCh37.75"
    snpEff_dbsnp_url        = "ftp.ncbi.nih.gov/snp/organisms/human_9606/VCF/00-All.vcf.gz"
    dbsnp_vcf               = "${params.ref_dir}/dbSNP/dbSNP_human_9606_b150_GRCh37p13.vcf.gz"
    dbNSFP_db               = "${ref_dir}/dbNSFP/"
    dbnsfp                  = "${ref_dir}/dbNSFP/dbNSFPv3.5a_b37.txt.gz"

    // GWAS Catalog from "http://www.genome.gov/admin/gwascatalog.txt"
    gwascatalog             = "${ref_dir}/gwascat/gwas_catalog_v1.0-associations_e89_r2017-08-15.tsv"

    // Clinvar from ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh37/vcf_2.0/clinvar_20170802.vcf.gz
    clinvar                 = "${ref_dir}/clinvar/clinvar_20170802.vcf.gz"

    // Human genome database
    human_ref               = "${ref_dir}/genome_ref/human_g1k_v37_decoy.fasta"

    // LiftOver files
    b37tob38_chain          = "${ref_dir}/liftover/GRCh37_to_GRCh38.chain.gz"
    b38tob37_chain          = "${ref_dir}/liftover/GRCh38_to_GRCh37.chain.gz"

    // Tools
    snpEff                  = "java -Xmx5g -jar ${venv}/share/snpeff-4.3-3/snpEff.jar"
    snpSift                 = "java -Xmx5g -jar ${venv}/share/snpsift-4.3-2/SnpSift.jar"
    picard                  = "java -jar ${venv}/share/picard-2.10.6-0/picard.jar"

    // 1000 Genomes ancestral alignments from ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/pilot_data/technical/reference/ancestral_alignments
    human_ancestor_fa_db    = "${ref_dir}/ensembl/ancestral_alignments/human_ancestor.fa.gz"

    // VEP
    vep_db_dir              = "${ref_dir}/vep"
    vep_db                  = "GRCh37"

    //
    cosmic                  = "${ref_dir}/cosmic/CosmicCodingMuts.vcf"

    mafs_annotations{
        // MAFs other databases
        KG             = "${ref_dir}/1000G/Allele_Freqs/KG.mafs"
        gnomAD         = "${ref_dir}/gnomAD/genomes/Allele_Freqs/gnomAD.mafs"
        ExAC           = "${ref_dir}/gnomAD/exomes/Allele_Freqs/ExAC.mafs"
        trypanogen     = "${ref_dir}/pop_mafs/trypanogen.all.phased.frq.mamana_ready_"
        sahgp          = "${ref_dir}/pop_mafs/sahgp.frq.frq.mamana_ready_"
        agvp           = "${ref_dir}/pop_mafs/agv3f.frq.frq.mamana_ready_"
//        other          = "${ref_dir}/pop_mafs/dbNSFPv3.5a_b37_af_final.frq"
    }
}

executor{
    jobName = { "$task.tag" }
}
env {
     my_scripts = "${PWD}:$PATH"
}
profiles {
    // For execution on a local machine, no containerization. -- Default
    standard {
        process.executor = 'local'
    }
    local {
        params {
            //threadCounts = [ 4 ]
            //alignThreads = 4
            resultsDir = "results"
        }

        executor {
            name = "local"
            //cpus = 4
        }
        docker {
            enabled = false
        }
    }
    // For execution on a PBS scheduler, no containerization.
    pbs {
        process{
            executor = 'pbs'
            //queue = 'WitsLong'
            cpus = 1
            memory = 2.GB
            time = 2.h
            maxRetries = 10
            maxErrors = 10000
            errorStrategy = { if (task.exitStatus == 143) { 'retry' } else if (task.exitStatus == 137 ) { 'retry' } else { 'retry' } }
        }
    }
}

workflow.onComplete = {
    println "========================================="
    println "Pipeline completed at: $workflow.complete"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
}
